<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019/08 on melody</title>
    <link>https://suzuki-shunsuke.github.io/archives/2019/08/</link>
    <description>Recent content in 2019/08 on melody</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Thu, 15 Aug 2019 07:39:18 +0900</lastBuildDate>
    
	<atom:link href="https://suzuki-shunsuke.github.io/archives/2019/08/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Drone v1 で gRPC が使われなくなった</title>
      <link>https://suzuki-shunsuke.github.io/drone-v1-deprecate-grpc/</link>
      <pubDate>Thu, 15 Aug 2019 07:39:18 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/drone-v1-deprecate-grpc/</guid>
      <description>v0.8 では server - agent 間の通信に gPRC が使われていましたが、 v1 では使われなくなりました。
理由  https://discourse.drone.io/t/curious-about-decision-to-drop-grpc/3987  gRPC関連のトラブルの問い合わせが多すぎてサポートしきれないので止めた   v1 での通信方法  https://discourse.drone.io/t/drone-agents-keep-closing-connections-with-499-code/5197/2  agent がロングポーリングしている 30秒後、なんのビルドもなければコネクションを切って、再接続する(張りっぱなしにしてると、LBやファイアウォールにコネクション切られるため)   自分も v0.8 から Drone を運用していて最近 v1 に upgrade しましたが、 v0.8 では gRPC 関連のトラブルが頻発していました。 server のログでは絶えず gRPC 関連のエラーを吐いていましたし、 server - agent 間の TCP connection が切れっぱなしになって戻らくなって agent 数がどんどん減っていったり ビルドが pending のままになったり、色々ありました。
関連する issue はあり、幾つか対策を打ってみたりしましたが、結局解決しませんでした。
 https://github.com/drone/drone/issues/2090 https://github.com/drone/drone/issues/2246 https://github.com/drone/drone/pull/2294 https://www.reddit.com/r/droneci/comments/8opifu/drone_stops_working_after_some_little_time/e06d1gn/  それが v1 にアップグレードして gRPC が使われなくなってから解消し、個人的にはとても助かりました。 管理者的にはアップグレードして一番嬉しい点ですね。</description>
    </item>
    
    <item>
      <title>Golang での時刻の扱い方を整理する</title>
      <link>https://suzuki-shunsuke.github.io/golang-time/</link>
      <pubDate>Wed, 14 Aug 2019 20:28:56 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/golang-time/</guid>
      <description>今更ながら Golang での時刻の扱い方について改めて整理してみました。
まとめ  DB などには UTC で永続化する 出力時に必要になったらタイムゾーンを変更する  location は出力時に問題になるので出力時に location を明示的に指定する 逆に言うと出力時以外は問題にならないので無理に location を UTC にしなくても良いかもしれない サードパーティ(ex. ORM) に time.Time を渡す場合は location に注意が必要  文字列として時刻の入力を受け付ける場合は location を明示的にセットする サードパーティが time.Local に依存する場合、 time.Local を明示的に UTC にしたりする必要があるかもしれない アプリケーションで利用する location が分かっている場合、location を取得するヘルパー関数を定義する time.LoadLocation は環境依存なので予め location が分かっているなら使わないほうがよい 文字列を time.Time に変換する場合、time.ParseInLocation で Location を指定して time.Time に変換後、time.Time.UTC() で UTC に変換する time.Time を文字列に変換する場合、time.In で location を変換後、time.Time.Format で文字列に変換する  グローバルな location https://golang.org/pkg/time/#Location
 Local represents the system&amp;rsquo;s local time zone.</description>
    </item>
    
    <item>
      <title>Drone v1 では Jsonnet が extension なしで使える</title>
      <link>https://suzuki-shunsuke.github.io/drone-jsonnet/</link>
      <pubDate>Fri, 02 Aug 2019 23:02:57 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/drone-jsonnet/</guid>
      <description>Drone では v1 から冗長な YAML を DRY にする一つの手として、 Jsonnet の利用が推奨されています。 これについては過去のブログでも触れています。
https://techblog.szksh.cloud/drone-jsonnet-generator/
しかし、 v1 の rc の時点では Jsonnet の活用には Jsonnet Extension が必要でした。
https://engineering.linecorp.com/ja/blog/go-oss-ci-cd-platform-drone-1-0-0-rc-1/#title7-1
しかし、 v1 の正式版では Jsonnet Extension がなくても Jsonnet が利用できるようになっています。
まず Drone の管理者側で Drone server に環境変数 DRONE_JSONNET_ENABLED=true を設定する必要があります。
そうしたら、ユーザー側は次のようにすることで jsonnet が使えます。
 .drone.yml の代わりに .drone.jsonnet をコミットする (.drone.yml は不要) 各リポジトリの settings の Main &amp;gt; Configuration で設定ファイルのパスを変更する  こうすることでビルド実行時に自動で Jsonnet が YAML に変換され処理されるようです。
いつから Jsonnet Extension は不要になったのか  https://github.com/drone/drone/compare/v1.0.0-rc.6...v1.0.0 https://github.com/drone/drone/commit/5013cfa993fa455fc56f10e45b9f36cf1d6dff57  v1 の rc ではサポートされてませんでしたが、正式版をリリースするタイミングで Jsonnet Extension が不要になっていたようです。</description>
    </item>
    
  </channel>
</rss>