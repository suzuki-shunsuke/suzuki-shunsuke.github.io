<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019/08 on melody</title>
    <link>https://suzuki-shunsuke.github.io/archives/2019/08/</link>
    <description>Recent content in 2019/08 on melody</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Wed, 14 Aug 2019 20:28:56 +0900</lastBuildDate>
    
	<atom:link href="https://suzuki-shunsuke.github.io/archives/2019/08/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang での時刻の扱い方を整理する</title>
      <link>https://suzuki-shunsuke.github.io/golang-time/</link>
      <pubDate>Wed, 14 Aug 2019 20:28:56 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/golang-time/</guid>
      <description>今更ながら Golang での時刻の扱い方について改めて整理してみました。
まとめ  DB などには UTC で永続化する 出力時に必要になったらタイムゾーンを変更する  location は出力時に問題になるので出力時に location を明示的に指定する 逆に言うと出力時以外は問題にならないので無理に location を UTC にしなくても良いかもしれない サードパーティ(ex. ORM) に time.Time を渡す場合は location に注意が必要  文字列として時刻の入力を受け付ける場合は location を明示的にセットする サードパーティが time.Local に依存する場合、 time.Local を明示的に UTC にしたりする必要があるかもしれない アプリケーションで利用する location が分かっている場合、location を取得するヘルパー関数を定義する time.LoadLocation は環境依存なので予め location が分かっているなら使わないほうがよい 文字列を time.Time に変換する場合、time.ParseInLocation で Location を指定して time.Time に変換後、time.Time.UTC() で UTC に変換する time.Time を文字列に変換する場合、time.In で location を変換後、time.Time.Format で文字列に変換する  グローバルな location https://golang.org/pkg/time/#Location
 Local represents the system&amp;rsquo;s local time zone.</description>
    </item>
    
  </channel>
</rss>