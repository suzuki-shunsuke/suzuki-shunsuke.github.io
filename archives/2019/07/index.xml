<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019/07 on melody</title>
    <link>https://suzuki-shunsuke.github.io/archives/2019/07/</link>
    <description>Recent content in 2019/07 on melody</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sun, 07 Jul 2019 08:20:00 +0900</lastBuildDate>
    
	<atom:link href="https://suzuki-shunsuke.github.io/archives/2019/07/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fagott - Golang HTTP client testing framework</title>
      <link>https://suzuki-shunsuke.github.io/fagott/</link>
      <pubDate>Sun, 07 Jul 2019 08:20:00 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/fagott/</guid>
      <description>Go の HTTP client のテストフレームワークを作ったので紹介します。
https://github.com/suzuki-shunsuke/fagott
執筆時点のバージョンは v0.3.0 です。
 リクエストパラメータのテスト HTTP サーバのモッキング  を目的としています。
比較的実践的なサンプルとして、ユーザーを作成する簡単な API client とそのテストを書いたので参考にしてください。
 https://github.com/suzuki-shunsuke/fagott/blob/master/examples/create_user.go https://github.com/suzuki-shunsuke/fagott/blob/master/examples/create_user_test.go#L17-L53  元々自分はこの目的のために h2non/gock を使っていました。 ただ、 gock だとリクエストがマッチしなかったときに、なぜマッチしないのかがわからず、調査に困るという問題がありました。
そこで fagott では request に対し、matcher と tester という概念を導入し、 matcher でマッチしたリクエストを tester でテストするというふうにしました。 テストでは内部で stretchr/testify の assert を使っており、テストに失敗したときになぜ失敗したのかが分かりやすく出力されるようになっています。
例えば以下の例は、リクエストの Authorization header にトークンがセットされていなかった場合のエラーメッセージです。
=== RUN TestClient_CreateUser --- FAIL: TestClient_CreateUser (0.00s) tester.go:168: Error Trace: tester.go:168 tester.go:32 transport.go:25 client.go:250 client.go:174 client.go:641 client.go:509 create_user.go:45 create_user_test.go:56 Error: Not equal: expected: []string{&amp;quot;token XXXXX&amp;quot;} actual : []string{&amp;quot;token &amp;quot;} Diff: --- Expected +++ Actual @@ -1,3 +1,3 @@ ([]string) (len=1) { - (string) (len=11) &amp;quot;token XXXXX&amp;quot; + (string) (len=6) &amp;quot;token &amp;quot; } Test: TestClient_CreateUser Messages: the request header &amp;quot;Authorization&amp;quot; should match service: http://example.</description>
    </item>
    
  </channel>
</rss>