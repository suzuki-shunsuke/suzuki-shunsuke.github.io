<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2020/12 on melody</title>
    <link>https://suzuki-shunsuke.github.io/archives/2020/12/</link>
    <description>Recent content in 2020/12 on melody</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language><atom:link href="https://suzuki-shunsuke.github.io/archives/2020/12/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>仕事でやったこと 2020-11-01 ~ 2020-11-30</title>
      <link>https://suzuki-shunsuke.github.io/job-2020-11-01-11-30/</link>
      <pubDate>Wed, 30 Dec 2020 05:44:14 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/job-2020-11-01-11-30/</guid>
      <description>2020-11-01 から 2020-11-30 にかけて仕事でやったことを書ける範囲で書きます。
 github-ci-monitor を導入し、 CI の失敗を通知  https://github.com/suzuki-shunsuke/github-ci-monitor   Terraform  Upgrade AWS Provider: Renovate で自動更新する仕組みの改善 Upgrade Terraform from v0.12 to v0.13 tfsec の導入 PR の label によって CI(plan/apply) の実行対象を追加できるようにした CircleCI から CodeBuild への移行 tfmigrate の検証   Monorepo の CI の高速化 (CircleCI)  k8s manifest の test を、変更があったものに対してだけ実行するようにした   kube-linter の導入 Renovate  https://quipper.hatenablog.com/entry/2020/12/10/080000 additionalBranchPrefix によるブランチの分割 depName を使ったリファクタリング   .circleci/config.yml の分割 ブログの執筆  Docker Hub の Rate Limit 問題に対応した話    </description>
    </item>
    
    <item>
      <title>Renovate の PR に便利なリンクを追加</title>
      <link>https://suzuki-shunsuke.github.io/renovate-add-compare/</link>
      <pubDate>Mon, 28 Dec 2020 14:32:31 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/renovate-add-compare/</guid>
      <description>Renovate による PR をレビューする際、差分がなんなのか分かりづらいときがあります。 例えば data source が github-release の場合、 PR の description に Release Note が含まれており、コードの差分も link があるので便利です。 一方 helm data source の場合、 そういったものがなく差分がなんなのか分からないことがあります。 そういう場合、 prBodyNotes を利用して link を追加すると便利です。
例えば、 datadog helm chart の場合
{ &amp;#34;datasources&amp;#34;: [&amp;#34;helm&amp;#34;], &amp;#34;packageNames&amp;#34;: [&amp;#34;datadog&amp;#34;], &amp;#34;prBodyNotes&amp;#34;: [ &amp;#34;[compare](https://github.com/DataDog/helm-charts/compare/datadog-{{currentVersion}}...datadog-{{newVersion}})&amp;#34; ] } とすると、 PR の description にリンクが追加されます。地味ですが便利です。 Release page へのリンクを追加しても便利かもしれませんね。
ex. https://github.com/suzuki-shunsuke/test-renovate-2/pull/28
template で使える変数は https://docs.renovatebot.com/templates/ を参照してください。 helm chart ごとに設定を書かないといけないのが面倒ですが、仕方ないですね。</description>
    </item>
    
    <item>
      <title>Renovate と Dependabot の比較</title>
      <link>https://suzuki-shunsuke.github.io/compare-renovate-dependabot/</link>
      <pubDate>Sat, 05 Dec 2020 12:37:17 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/compare-renovate-dependabot/</guid>
      <description>普段 Renovate を主に使っている自分が、 Dependabot と Renovate の違いについて調べてみました。 普段 Renovate を主に使っているので、 Renovate 寄りの内容になっています。 気分を害する人がいましたら申し訳ありません。 Dependabot の理解が浅いので間違ってたら指摘してもらえると助かります。 2020-12-01 時点の情報です。
設定項目の数  https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/configuration-options-for-dependency-updates#directory https://docs.renovatebot.com/configuration-options/  まずは設定のドキュメントを見比べると、 Renovate のほうが設定項目が多いです。 Renovate はよく言うと設定項目が多く、柔軟な設定ができるといえる一方、すべての設定を理解し使いこなすのは難しいです。 決して日本語の情報も多くないので、色々試行錯誤したりすることもあります。 Dependabot の場合、設定がそんなに多くなく割と分かりやすい印象があります。
scheduling  https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/configuration-options-for-dependency-updates#scheduleinterval https://docs.renovatebot.com/configuration-options/#prhourlylimit https://docs.renovatebot.com/configuration-options/#schedule  Dependabot は schedule の設定が必須です。 Renovate でも schedule の設定は出来ます。
Dependabot は 1 個 1 個設定しないといけない？ Renovate は renovate.json さえ作れば中身がほぼ空でも勝手に update されます。 逆に対象を絞りたかったら明示的に指定する必要があります。
一方で Dependabot は対象を 1 つ 1 つ指定しないといけないようですね。
もちろん、これは必ずしも悪いことではないですし、良い面もあります。 設定が明示的に書かれていたほうが挙動を理解しやすいですしね。
ただし、数が多いと大変ですし、サービスを追加するたびに設定を追加しないといけなさそうです。
Renovate は .circleci/config.yml などの update もサポート  https://docs.</description>
    </item>
    
    <item>
      <title>Terraform の Docker Provider の Collaborator になりました</title>
      <link>https://suzuki-shunsuke.github.io/collaborator-of-terraform-docker-provider/</link>
      <pubDate>Thu, 03 Dec 2020 09:07:32 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/collaborator-of-terraform-docker-provider/</guid>
      <description>先日 kreuzwerker/terraform-provider-docker の Collaborator になりました。 kreuzwerker/terraform-provider-docker は Terraform の Docker Provider であり、 Docker コンテナや image, network などを管理できます。 元々は Hashicorp の Official Provider であった terraform-providers/terraform-provider-docker が kreuzwerker/terraform-provider-docker に移管され、 Community Provider になりました。 元のリポジトリは hashicorp org に移され archive されています。
Collaborator になった経緯 リポジトリが移管される際に、メンテナを募集していて過去に contribution していた自分にも声をかけていただきました。
https://github.com/hashicorp/terraform-provider-docker/issues/306
Contributor になった経緯 自分がこの provider に contribution した経緯は、 Terraform の Hands on を書くのに丁度よい provider を探していたことでした。
Hands on の題材として Docker コンテナを作ったりできたらいいんじゃないかなと思って Docker provider を試してみました。 しかし当時の docker_container リソースは read をちゃんとサポートしていませんでした。 なので import や update がまともに動きませんでした。 それを見かねて修正して PR を投げたのが最初です。</description>
    </item>
    
  </channel>
</rss>
