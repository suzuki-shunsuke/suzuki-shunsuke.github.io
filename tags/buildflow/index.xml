<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>buildflow on melody</title>
    <link>https://suzuki-shunsuke.github.io/tags/buildflow/</link>
    <description>Recent content in buildflow on melody</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sat, 17 Oct 2020 20:49:28 +0900</lastBuildDate>
    
	<atom:link href="https://suzuki-shunsuke.github.io/tags/buildflow/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>buildflow で設定ファイルを分割する</title>
      <link>https://suzuki-shunsuke.github.io/buildflow-split-files/</link>
      <pubDate>Sat, 17 Oct 2020 20:49:28 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/buildflow-split-files/</guid>
      <description>buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書こうかなと思います。
この記事では buildflow の設定ファイルを分割する方法について説明します。
buildflow では一部の設定項目について他のファイルのパスを指定して読み込むということが出来ます。 1 つのファイルに全部の設定を書いていると、ファイルが大きくなってメンテナンス性が悪くなったり、 コードオーナーが曖昧になったりするので、そういう場合は分割すると良いでしょう。 コードオーナーが異なる複数のサービスで共通の設定ファイルを用いる場合、ファイルを分割して GitHub の CODEOWNERS を設定するのもよいでしょう。 あまりないかもしれませんが、ファイルを分割すると同じファイルを読み込んで再利用も出来ます。
また、 Tengo script を独立したファイルに分割すると、 test が可能になります。 Tengo script をテストするためのツールとして tengo-tester というツールも開発しているので、そちらをお使いください。
以下のようなファイル読み込みの設定があります。
 phase.import task.import: task.input_file task.output_file task.when_file command.command_file command.env[].value_file write_file.template_file  ファイルのパスは、絶対パスか、実行中の build の設定ファイルが存在するディレクトリからの相対パスになります。</description>
    </item>
    
    <item>
      <title>buildflow の script や template に渡される parameter</title>
      <link>https://suzuki-shunsuke.github.io/buildflow-parameter/</link>
      <pubDate>Sat, 17 Oct 2020 19:44:39 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/buildflow-parameter/</guid>
      <description>buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書こうと思います。
この記事では buildflow の Tengo script やテンプレートにパラメータとして渡される変数について紹介します。
buildflow では Tengo script はテンプレートが使える設定項目が多くあります。それらの設定には共通のフォーマットのパラメータが渡されます。
 PR: Pull Request の情報: GitHub API のレスポンス body Files: Pull Request で更新されたファイルの一覧: GitHub API のレスポンス body Phases: 対象の Phase よりも前の Phase の結果 Phase: 対象の Phase Tasks: 対象の Phase の Task の結果 Task: 対象の Task Item: dynamic task のパラメータとして渡される Meta: 設定 meta  Phase
 Status: Phase の実行結果  succeeded failed skipped  Tasks: Phase の task の実行結果 Meta: phase の 設定 meta  Task</description>
    </item>
    
    <item>
      <title>buildflow の task の設定項目</title>
      <link>https://suzuki-shunsuke.github.io/buildflow-task/</link>
      <pubDate>Sat, 17 Oct 2020 18:26:57 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/buildflow-task/</guid>
      <description>buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書こうと思います。
この記事では buildflow の task の基本的な設定項目などについて説明します。 数が多いので、個々の設定の詳細はまた別の記事に書きます。
task には幾つか type がありますが、全ての type に共通するパラメータが以下になります。
 name: task 名。 unique である必要はない。 Go の text/template が使える when: task を実行するか否か。 真偽値か Tengo script  when_file で外部ファイルを読み込める  dependency: task の依存関係の定義。 task 名のリストか、 Tengo script items: dynamic task の設定。 loop を使って複数の task を動的に生成できる  任意の list か map か、 Tengo script  input: Tengo script で task のコマンドのパラメータを生成できる  input_file で外部ファイルを読み込める  output: Tengo script で task の実行結果を整形できる。他の task が参照して挙動を変えたりできる  output_file で外部ファイルを読み込める  meta: ユーザーが自由にパラメータを定義できる map  上記の設定は name 以外はオプションです。</description>
    </item>
    
    <item>
      <title>buildflow の build, phase, task について</title>
      <link>https://suzuki-shunsuke.github.io/buildflow-build-phase-task/</link>
      <pubDate>Sat, 17 Oct 2020 18:09:19 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/buildflow-build-phase-task/</guid>
      <description>buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書こうと思います。
この記事では buildflow の概念である build, phase, task について書きたいと思います。
buildflow には Build, Phase, Task という概念があります。 CircleCI の Pipeline, Workflow, Job みたいなものと思ってもらえるとよいと思います。
$ buildflow run  で 1 つの build が実行されます。 build は複数の phase からなり、 phase が 1 つずつ順に実行されます。 phase は複数の task からなり、 task が全て終了すると、その phase も終了となります。 task は並列に実行したり、依存関係を定義したりできます。 task では外部コマンドを実行したりできます。
設定ファイルでは phases, tasks をそれぞれ配列で指定します。
--- phases: - name: setup tasks: - name: hello command: command: echo hello - name: foo command: command: echo foo - name: build tasks: - name: hello command: command: echo hello - name: foo command: command: echo foo dependency: - hello - name: post build tasks: - name: hello command: command: echo hello  上の例では 3 つの phase setup, build, post build が順に実行されます。 デフォルトではどれかの phase が失敗するとそれ以降の phase は実行されません(この挙動は変えられます)。</description>
    </item>
    
    <item>
      <title>buildflow での Tengo の使い方</title>
      <link>https://suzuki-shunsuke.github.io/buildflow-tengo/</link>
      <pubDate>Sat, 17 Oct 2020 17:18:34 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/buildflow-tengo/</guid>
      <description>buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書こうかなと思います。
この記事では buildflow で Tengo というスクリプト言語をどのように使っているか書きたいと思います。
https://github.com/d5/tengo
buildflow の設定では task.when や task.dependency, task.input などで Tengo script が使えますが、 1 つの共通のルールがあります。 result という変数を宣言し、 script の実行結果をその変数に持たせるというルールです。 これは Tengo の仕様とかではなく、 buildflow 特有のルールです。 もっとも単純な例だと次のような感じです。
result := true  task.input, output などだと result の値が Task.Input, Task.Output として参照できるようになります。
--- phases: - name: main tasks: - name: hello input: | result := { foo: &amp;quot;bar&amp;quot; } command: command: &#39;echo &amp;quot;{{.Task.Input.foo}}&amp;quot;&#39; when: &amp;quot;result := true&amp;quot;  Tengo の標準ライブラリ Tengo には標準ライブラリがあります。 buildflow では全ての標準ライブラリが使えます。</description>
    </item>
    
    <item>
      <title>buildflow というワークフローエンジンのようなタスクランナーのようなツールを作っている</title>
      <link>https://suzuki-shunsuke.github.io/buildflow-1/</link>
      <pubDate>Sat, 17 Oct 2020 16:06:31 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/buildflow-1/</guid>
      <description>buildflow というツールを開発しているので紹介します。 buildflow というタグをつけて何回かに分けてブログを書こうかなと思います。 1本目のこの記事では
 どんなツールか Hello World 特徴  について簡単に説明します。
どんなツールか https://github.com/suzuki-shunsuke/buildflow
ワークフローを実行するための CLI ツールです。 ワークフローエンジンと言うと Airflow とか Azkaban, Argo Workflows のようなツールをイメージするかと思いますが、 それらとは目的も機能も違います。 一部の CI サービスではワークフローのローカル実行をサポートしてたりしますが、そんなイメージで良いかもしれません。 buildflow では task と task の依存関係を設定ファイルに定義し、コマンドを実行するとローカルでタスクが実行されます。 そういうとタスクランナーといったほうがいいのかもしれませんが、個別のタスクを指定して実行するような機能はないので、タスクランナーとも違う気がします。
CI サービス上で実行することを目的として開発しています(汎用的なツールなので他の目的でも使えるとは思います)。
Hello World まだどんなツールかピンと来てない人もいるかもしれないので、簡単な Hello World をやってみましょう。
GitHub Releases からバイナリをダウンロードしてください。
次のような設定ファイル .buildflow.yaml を用意します。
--- phases: - name: main tasks: - name: hello command: command: echo hello  次のコマンドを実行すると task が実行されます。
$ buildflow run ============== = Phase: main = ============== 07:50:46UTC | hello | + /bin/sh -c echo hello 07:50:46UTC | hello | 07:50:46UTC | hello | hello 07:50:46UTC | hello | ================ = Phase Result: main = ================ status: succeeded task: hello status: succeeded exit code: 0 start time: 2020-10-17T07:50:46Z end time: 2020-10-17T07:50:46Z duration: 4.</description>
    </item>
    
  </channel>
</rss>