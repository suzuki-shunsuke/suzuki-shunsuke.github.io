<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>circleci on melody</title>
    <link>https://suzuki-shunsuke.github.io/tags/circleci/</link>
    <description>Recent content in circleci on melody</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Mon, 01 Oct 2018 07:23:15 +0900</lastBuildDate>
    
	<atom:link href="https://suzuki-shunsuke.github.io/tags/circleci/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>travis ci から circle ci への移行のすすめ</title>
      <link>https://suzuki-shunsuke.github.io/migrate-from-travis-ci-to-circle-ci/</link>
      <pubDate>Mon, 01 Oct 2018 07:23:15 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/migrate-from-travis-ci-to-circle-ci/</guid>
      <description>travis ci と circle ci の無償SaaS 版を比較しています。
OSS の CI では travis ci がよく使われる印象がありますが、 場合によっては circle CI に移行するとCIの時間が大幅に短くなったりして良いと思います。 ただし、複数バージョンで並列にテストしたい場合、circle ci の無償planだと並列に実行できないため、 travis でやったほうが速いかもしれません。
Circle CI の良いところ  好きな Docker Image が使える ローカルでテストが出来る Pending 時間が travis ci に比べて短い気がする(主観) private repository の CI も出来る  好きな Docker Image が使えるのが大きいですね。 予め CI に必要なツールをインストールした Image を用意しておくことで大幅に高速化出来ますし、 ツールがインストールできなかったりバージョンが変わってしまったりするトラブルも避けられます。 同じImageを使ってローカルでテストできるのでローカルでの検証もしやすいです。
自分の場合 Golang のツールの CI用に Docker Image を用意しています。
https://hub.docker.com/r/suzukishunsuke/go-ci/</description>
    </item>
    
    <item>
      <title>Drone と Circle CI の workspace の扱いの違いについて</title>
      <link>https://suzuki-shunsuke.github.io/drone-circle-volume-difference/</link>
      <pubDate>Sun, 30 Sep 2018 19:27:59 +0900</pubDate>
      
      <guid>https://suzuki-shunsuke.github.io/drone-circle-volume-difference/</guid>
      <description>drone は同じ pipeline の step 間で同じ workspace を docker の volume としてマウントすることで workspace を共有します。
http://docs.drone.io/workspace/
circle ci はデフォルトで job 間で workspace を共有しません。 persist_to_workspace を指定することで共有する事ができます。
https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
circle ci の場合は volume を共有するのではなく、指定したディレクトリを archive し、次の job で展開することでファイルを共有するようです。
この違いには一長一短があります。
circle ci の場合は archive, unarchive する分、volume 共有に比べて時間がかかります。
そのため、下手に job を分けるより一つの job で処理したほうが処理時間が短くなる場合がありますが、 build や test といった処理は出来れば別の job として実行したいでしょうし、それでは workflow が使えません。
ただし、共有するパスは自由に選べるので必要最小限に抑えることで時間を短縮できます。
また、circle ci の場合は archive するパス及び展開先のパスを自由に選べるので自由度が高いです。 drone の場合、 workspace 以外のファイルを共有できません。
また、drone の場合 volume を共有するので同じ pipeline の step は同じノードで実行されるという制約がありますが、 circle ci の場合、別のノードでの実行が可能です。 drone の group を使って並列に実行する場合、複数のノードに分散できませんが、 circle ci の場合分散できるのでよりスケールしやすいと言えるでしょう。</description>
    </item>
    
  </channel>
</rss>